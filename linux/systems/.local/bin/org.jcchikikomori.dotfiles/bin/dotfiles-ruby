#!/usr/bin/env bash

set -euo pipefail

RBENV_ROOT="${RBENV_ROOT:-${HOME}/.rbenv}"
TARGET_RUBY_VERSION="${TARGET_RUBY_VERSION:-2.5.1}"
REQUIRED_FORMULAE=(rbenv ruby-build openssl@3 readline libyaml gdbm libffi zlib)
ENV_ONLY_FORMULAE=(rbenv ruby-build)

log() {
  printf '[dotfiles-ruby] %s\n' "$*"
}

script_dir() {
  cd "$(dirname "${BASH_SOURCE[0]}")" && pwd
}

ensure_homebrew() {
  local brew_bin

  if brew_bin="$(command -v brew 2>/dev/null)" && [ -n "${brew_bin}" ]; then
    eval "$(${brew_bin} shellenv)"
    return
  fi

  for brew_bin in \
    "${HOMEBREW_PREFIX:-}/bin/brew" \
    "${HOME}/.linuxbrew/bin/brew" \
    "/home/linuxbrew/.linuxbrew/bin/brew"; do
    if [ -x "${brew_bin}" ]; then
      log "Using Homebrew at ${brew_bin}"
      eval "$("${brew_bin}" shellenv)"
      return
    fi
  done

  log "Homebrew not found. Installing Linuxbrew locally..."
  "$(script_dir)/dotfiles-homebrew" install

  if brew_bin="$(command -v brew 2>/dev/null)" && [ -n "${brew_bin}" ]; then
    eval "$(${brew_bin} shellenv)"
    return
  fi

  for brew_bin in \
    "${HOME}/.linuxbrew/bin/brew" \
    "/home/linuxbrew/.linuxbrew/bin/brew"; do
    if [ -x "${brew_bin}" ]; then
      eval "$("${brew_bin}" shellenv)"
      return
    fi
  done

  log "Error: Homebrew installation failed or brew not found in PATH."
  exit 1
}

install_formulae() {
  local formula
  for formula in "$@"; do
    if brew list --formula "${formula}" >/dev/null 2>&1; then
      log "${formula} already installed."
    else
      log "Installing ${formula} via Homebrew..."
      brew install "${formula}"
    fi
  done
}

prepare_build_environment() {
  local brew_prefix openssl_prefix readline_prefix libyaml_prefix gdbm_prefix libffi_prefix zlib_prefix pkg_paths

  brew_prefix="$(brew --prefix)"
  openssl_prefix="$(brew --prefix openssl@3)"
  readline_prefix="$(brew --prefix readline)"
  libyaml_prefix="$(brew --prefix libyaml)"
  gdbm_prefix="$(brew --prefix gdbm)"
  libffi_prefix="$(brew --prefix libffi)"
  zlib_prefix="$(brew --prefix zlib)"

  export PATH="${brew_prefix}/bin:${brew_prefix}/sbin:${PATH}"

  local lib_path include_path path
  local filtered_pkg_paths=()

  for lib_path in \
    "${openssl_prefix}/lib" \
    "${readline_prefix}/lib" \
    "${libyaml_prefix}/lib" \
    "${gdbm_prefix}/lib" \
    "${libffi_prefix}/lib" \
    "${zlib_prefix}/lib"; do
    if [ -d "${lib_path}" ]; then
      LDFLAGS="-L${lib_path} ${LDFLAGS:-}"
    fi
  done
  export LDFLAGS

  for include_path in \
    "${openssl_prefix}/include" \
    "${readline_prefix}/include" \
    "${libyaml_prefix}/include" \
    "${gdbm_prefix}/include" \
    "${libffi_prefix}/include" \
    "${zlib_prefix}/include"; do
    if [ -d "${include_path}" ]; then
      CPPFLAGS="-I${include_path} ${CPPFLAGS:-}"
    fi
  done
  export CPPFLAGS

  local pkg_paths=(
    "${openssl_prefix}/lib/pkgconfig"
    "${readline_prefix}/lib/pkgconfig"
    "${libyaml_prefix}/lib/pkgconfig"
    "${gdbm_prefix}/lib/pkgconfig"
    "${libffi_prefix}/lib/pkgconfig"
    "${zlib_prefix}/lib/pkgconfig"
  )
  for path in "${pkg_paths[@]}"; do
    if [ -d "${path}" ]; then
      filtered_pkg_paths+=("${path}")
    fi
  done
  if [ "${#filtered_pkg_paths[@]}" -gt 0 ]; then
    export PKG_CONFIG_PATH="$(IFS=:; echo "${filtered_pkg_paths[*]}")${PKG_CONFIG_PATH:+:${PKG_CONFIG_PATH}}"
  fi

  export RUBY_CONFIGURE_OPTS="--with-openssl-dir=${openssl_prefix} --with-readline-dir=${readline_prefix} ${RUBY_CONFIGURE_OPTS:-}"
}

bootstrap_rbenv() {
  export RBENV_ROOT
  export PATH="${RBENV_ROOT}/bin:${PATH}"

  if ! command -v rbenv >/dev/null 2>&1; then
    log "Error: rbenv not found even after installation."
    exit 1
  fi

  eval "$(rbenv init -)"
}

install_ruby_version() {
  log "Installing Ruby ${TARGET_RUBY_VERSION} with Homebrew-provided dependencies..."
  if ! rbenv install --skip-existing --verbose "${TARGET_RUBY_VERSION}"; then
    log "Error: Failed to install Ruby ${TARGET_RUBY_VERSION}."
    exit 1
  fi

  log "Setting Ruby ${TARGET_RUBY_VERSION} as global version..."
  rbenv global "${TARGET_RUBY_VERSION}"
  rbenv rehash

  if ! ruby -v | grep -F "${TARGET_RUBY_VERSION}" >/dev/null; then
    log "Error: Ruby ${TARGET_RUBY_VERSION} is not active after installation."
    exit 1
  fi
}

install_action() {
  log "Preparing isolated Ruby toolchain using Homebrew..."
  ensure_homebrew
  export HOMEBREW_NO_ANALYTICS=1
  export HOMEBREW_NO_ENV_HINTS=1

  install_formulae "${REQUIRED_FORMULAE[@]}"
  prepare_build_environment
  bootstrap_rbenv
  install_ruby_version

  log "Installation complete."
}

env_action() {
  log "Ensuring Homebrew-backed rbenv environment..."
  ensure_homebrew
  export HOMEBREW_NO_ANALYTICS=1
  export HOMEBREW_NO_ENV_HINTS=1

  install_formulae "${ENV_ONLY_FORMULAE[@]}"
  bootstrap_rbenv

  log "rbenv root: ${RBENV_ROOT}"
  log "Add the following to your shell profile to activate rbenv:"
  log "  export RBENV_ROOT=\"${RBENV_ROOT}\""
  log "  export PATH=\"\\$RBENV_ROOT/bin:\\$PATH\""
  log "  eval \"\\$(rbenv init -)\""
}

usage() {
  cat <<'USAGE'
Usage: dotfiles-ruby {install|env}
  install : Install Homebrew dependencies, rbenv, and the target Ruby version via rbenv
  env     : Ensure rbenv is available and output environment setup instructions
USAGE
}

main() {
  if [ $# -lt 1 ]; then
    usage
    exit 1
  fi

  case "$1" in
    install)
      install_action
      ;;
    env)
      env_action
      ;;
    *)
      usage
      exit 1
      ;;
  esac
}

main "$@"
