#!/bin/bash

# Script to clean up local branches that have been deleted upstream
# Usage: ./cleanup-branches.sh [-f]
# Options:
#   -f  Force mode - actually delete branches (default: preview mode)

FORCE=false

# Parse options
while [ $# -gt 0 ]; do
    case "$1" in
        -f) FORCE=true; shift;;
        *) break;;
    esac
done

# Fetch latest information from remote
echo "Fetching latest updates..."
git fetch -p

# Get list of branches that have upstream tracking but upstream is gone
echo "Checking for orphaned branches..."
BRANCHES_TO_DELETE=$(git for-each-ref --format '%(refname:short) %(upstream:track)' refs/heads | \
    awk '$2 == "[gone]" {print $1}')

if [ -z "$BRANCHES_TO_DELETE" ]; then
    echo "No orphaned branches found!"
    exit 0
fi

# Show branches that would be affected
echo "Found the following orphaned branches:"
echo "$BRANCHES_TO_DELETE" | while read branch; do
    echo "- $branch"
done

if ! $FORCE; then
    read -p "Would you like to proceed? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo "Operation cancelled"
        exit 0
    fi
fi

# Delete the branches
echo "Deleting branches..."
echo "$BRANCHES_TO_DELETE" | while read branch; do
    if [ "$(git rev-parse --abbrev-ref HEAD)" != "$branch" ]; then
        git branch -D "$branch"
        echo "Deleted branch: $branch"
    else
        echo "Skipping current branch: $branch"
    fi
done

echo "Cleanup complete!"
